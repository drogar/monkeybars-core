---
title: 'Monkeybars: Tools enabled GUI development'
current_page: index
filter:
  - erb
  - textile
---
<div id="sidebar">

		<h2>Latest News</h2>

	<p class="news">
    Nov 6. 2010 - Assorted changes. <br/>No more using Kenai or Rubyforge. <br/>Project code is hosted on "github.com":https://github.com/monkeybars/monkeybars-core .<br/> Bugs are being tracked on "Pivotal Tracker":http://www.pivotaltracker.com/projects/118006 . <br/>The mailing list is on "Google Groups":http://groups.google.com/group/monkeybars-mvc.
		</p>
	
	<p class="news">
	    1-27-08 - A "Kenai project":http://kenai.com/projects/monkeybars has been started for Monkeybars .  The "wiki":http://kenai.com/projects/monkeybars/pages/Home is rapidly building up.
		</p>
		
		<p class="news">
			1-17-08 - Monkeybars 1.0.1 has been released. 
		</p>
		
		<p class="news">
			5-8-08 - New <a href="tutorials.html">tutorials</a> page is up on the <a href="docs.html">docs</a> page.  This new documentation is a mix of text and screencasts.
		</p>
	
		<p class="news">
			4-28-08 - Transition to Git and new source/issue tracking in in place.  Visit the issue tracking page at Google code <a href="http://code.google.com/p/monkeybars-lib/">here</a> and visit our new repo home <a href="http://gitorious.org/projects/monkeybars">here</a>.
		</p>
		
		<p class="news">
			3-30-08 - Monkeybars 0.6.1 has been released.  This is mostly a maintenance release.  The major fix is with the generator system which now works much better for non-IDE based development.  Also, an examples directory has been added to the repo with two example applications (also posted to the examples page).
		</p>
		
		<p class="news">
			3-07-08 - Monkeybars 0.6 is out, major changes in this version.  Please check out the new docs.  Also a new screencast showing off the new featurs is also forthcoming.
		</p>
		
		<p class="news">
			12-07-07 - The Monkeybars screencast is finally out.  It comes in two parts, a high level overview and the creation of an rss reader. The video is located on the <a href="docs.html">docs page</a>. I neglected to mention in the screencast that if you do "rake rawr:jar" to build your application for deployment you'll need the Netbeans swing extension library (swing-layout-1.0.3.jar) in your lib directory.
		</p>
		
		<p class="news">
			12-05-07 - Our mailing list has moved.  The Rubyforge mailing list had various annoying issues (such as the respond to address) so we've migrated over to Google groups (<a href="http://groups.google.com/group/monkeybars">http://groups.google.com/group/monkeybars</a>).
		</p>
		
		<p class="news">
			New project management system is in place.  We decided on Redmine, a Ruby on Rails (though that's not the reason we chose it) based issue tracker that, so far, rocks way harder than Trac.  Click the "Issue Tracker" link above to participate.
		</p>
		
		<p class="news">
			Monkeybars 0.5 is out.
		</p>
		
		<p class="news">
			Monkeybars 0.4 is released! This is our first real public release.
		</p>

</div>

<div id="content">

  <h2>Update: October 2011</h2>
  <p>
    Monkeybars is still in active development.  Mostly that means making sure it continues to work with each new release of JRuby. Monkeybars, for the most part, is feature-complete.  
  </p>
  <p>The current JRuby is 1.6.4, and work is underway to check Monkeybars (and Rawr) against this release.</p>
  <p>This Web site also needs various updates and changes; in the meantime, apologies for the cruft until it is cleaned up.</p>

   <p>Please note, too, that this is the current Web site.  The pages on Rubyforge.org are vestigial junk that needs to disappear.</p>
		<h2>About</h2>
		
		<p>
				Thanks for checking out Monkeybars.  This is a library that enables you to make use of Swing from <a href="http://jruby.codehaus.org/">JRuby</a>.  Monkeybars aims to allow you to continue using the GUI editing tools you are used to but makes it easy to write all your application logic in pure Ruby.  In fact, with most editors you'll never even have to look at the Java.	
		</p>
		
		<h2>Philosophy</h2>
		<h3>Origins</h3>
		<p>
				
				Monkeybars was created from a pretty specific need.  A few years ago, my former company, Happy Camper Studios, was working on a large Swing application and we wanted to be able to easily write all the logic in Ruby via JRuby.  Our initial attempts laid the groundwork for what was to become Monkeybars.  Because of our needs, Monkeybars has an emphasis on using normal Swing development tools (we were using <a href="http://www.netbeans.org/">Netbeans 6</a>) and especially the ability to sit down with a client and use a visual designer to create the Swing layouts.  To this end, Monkeybars is designed to reach in and integrate itself with a Java class without any special consideration on the Java side.  This means Monkeybars should work with Java code emitted from any Swing form designer, we don't parse the code directly so there is no issue with code formatting or code conventions used inside the class.
					
		</p>
		
		<p>
				So, what do we mean by "easily"?  Well, I've got a pretty low tolerance for pain in my code so ideally everything gets reduced down to a one liner.  Want to set up mouse event listeners on all elements in your form?
		</p>
		
		<blockquote>
				<p>add_listener :type => :mouse</p>
				
		</blockquote>
		
		<p>
				Or how about declaring that only the components okButton and cancelButton should get mouse events?
		</p>
					
		<blockquote>
				<p>add_listener :type => :mouse, :components => ["okButton", "cancelButton"]</p>
		</blockquote>
		
		<p>
				How about sending some long-running task off to its own thread without freezing the GUI until it is done?
		</p>
		
		<blockquote>
				<p>repaint_while { # call some long running method }
		</blockquote>

		<p>
				Still not convinced?  Go so more code samples on the <a href="examples.html">examples</a> page.
		</p>

		<h3>Testing</h3>				
		<p>
				A second important consideration for us was testability.  Our early attempts to create a Ruby interface to Swing left us with brittle, difficult to test code.  Therefore in Monkeybars we implemented a stark separation between controller and view.  All* communication between the two is accomplished via a model which is just a plain Ruby class.  This keeps your controllers much more testable.  The views also are typically smaller and much easier to test, only being concerned with their methods to convert data from and back into the model.<br/><br/>
				* I say all but in reality there is direct communication between the controller and the view, it's just behind the scenes so you don't have to think of it in terms of direct communication.

		</p>
				

</div>